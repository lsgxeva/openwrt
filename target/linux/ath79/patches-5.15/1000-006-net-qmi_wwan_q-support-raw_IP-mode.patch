Index: linux-5.15.139/drivers/net/usb/qmi_wwan_q.c
===================================================================
--- linux-5.15.139-orig/drivers/net/usb/qmi_wwan_q.c
+++ linux-5.15.139/drivers/net/usb/qmi_wwan_q.c
@@ -16,6 +16,7 @@
 #include <linux/netdevice.h>
 #include <linux/ethtool.h>
 #include <linux/etherdevice.h>
+#include <linux/if_arp.h>
 #include <linux/time.h>
 #if LINUX_VERSION_CODE > KERNEL_VERSION(3,16,0) //8b094cd03b4a3793220d8d8d86a173bfea8c285b
 #include <linux/timekeeping.h>
@@ -102,8 +103,81 @@ struct qmi_wwan_state {
 	unsigned long unused;
 	struct usb_interface *control;
 	struct usb_interface *data;
+	unsigned long flags;
+};
+
+enum qmi_wwan_flags {
+	QMI_WWAN_FLAG_RAWIP = 1 << 0,
 };
 
+static void qmi_wwan_netdev_setup(struct net_device *net)
+{
+	struct usbnet *dev = netdev_priv(net);
+	struct qmi_wwan_state *info = (void *)&dev->data;
+
+	if (info->unused & QMI_WWAN_FLAG_RAWIP) {
+		net->header_ops      = NULL;  /* No header */
+		net->type            = ARPHRD_NONE;
+		net->hard_header_len = 0;
+		net->addr_len        = 0;
+		net->flags           = IFF_POINTOPOINT | IFF_NOARP | IFF_MULTICAST;
+		netdev_dbg(net, "mode: raw IP\n");
+	} else if (!net->header_ops) { /* don't bother if already set */
+		ether_setup(net);
+		netdev_dbg(net, "mode: Ethernet\n");
+	}
+
+	/* recalculate buffers after changing hard_header_len */
+	usbnet_change_mtu(net, net->mtu);
+}
+
+static ssize_t raw_ip_show(struct device *d, struct device_attribute *attr, char *buf)
+{
+	struct usbnet *dev = netdev_priv(to_net_dev(d));
+	struct qmi_wwan_state *info = (void *)&dev->data;
+
+	return sprintf(buf, "%c\n", info->unused & QMI_WWAN_FLAG_RAWIP ? 'Y' : 'N');
+}
+
+static ssize_t raw_ip_store(struct device *d,  struct device_attribute *attr, const char *buf, size_t len)
+{
+	struct usbnet *dev = netdev_priv(to_net_dev(d));
+	struct qmi_wwan_state *info = (void *)&dev->data;
+	bool enable;
+	int err;
+
+	if (strtobool(buf, &enable))
+		return -EINVAL;
+
+	/* no change? */
+	if (enable == (info->unused & QMI_WWAN_FLAG_RAWIP))
+		return len;
+
+	/* we don't want to modify a running netdev */
+	if (netif_running(dev->net)) {
+		netdev_err(dev->net, "Cannot change a running device\n");
+		return -EBUSY;
+	}
+
+	/* let other drivers deny the change */
+	err = call_netdevice_notifiers(NETDEV_PRE_TYPE_CHANGE, dev->net);
+	err = notifier_to_errno(err);
+	if (err) {
+		netdev_err(dev->net, "Type change was refused\n");
+		return err;
+	}
+
+	if (enable)
+		info->unused |= QMI_WWAN_FLAG_RAWIP;
+	else
+		info->unused &= ~QMI_WWAN_FLAG_RAWIP;
+	qmi_wwan_netdev_setup(dev->net);
+	call_netdevice_notifiers(NETDEV_POST_TYPE_CHANGE, dev->net);
+	return len;
+}
+
+static DEVICE_ATTR_RW(raw_ip);
+
 /* default ethernet address used by the modem */
 static const u8 default_modem_addr[ETH_ALEN] = {0x02, 0x50, 0xf3};
 
@@ -633,6 +707,16 @@ static struct attribute_group qmi_wwan_s
 	.attrs = qmi_wwan_sysfs_attrs,
 };
 
+static struct attribute *qmi_wwan_rawip_sysfs_attrs[] = {
+	&dev_attr_raw_ip.attr,
+	NULL,
+};
+
+static struct attribute_group qmi_wwan_rawip_sysfs_attr_group = {
+	.name = "qmi",
+	.attrs = qmi_wwan_rawip_sysfs_attrs,
+};
+
 #ifdef QUECTEL_BRIDGE_MODE
 static struct attribute *qmi_qmap_sysfs_attrs[] = {
 	&dev_attr_bridge_mode.attr,
@@ -1587,6 +1671,8 @@ static struct sk_buff *qmi_wwan_tx_fixup
  */
 static int qmi_wwan_rx_fixup(struct usbnet *dev, struct sk_buff *skb)
 {
+	struct qmi_wwan_state *info = (void *)&dev->data;
+	bool rawip = info->unused & QMI_WWAN_FLAG_RAWIP;
 	__be16 proto;
 
 	/* This check is no longer done by usbnet */
@@ -1601,15 +1687,24 @@ static int qmi_wwan_rx_fixup(struct usbn
 		proto = htons(ETH_P_IPV6);
 		break;
 	case 0x00:
+		if (rawip)
+			return 0;
 		if (is_multicast_ether_addr(skb->data))
 			return 1;
 		/* possibly bogus destination - rewrite just in case */
 		skb_reset_mac_header(skb);
 		goto fix_dest;
 	default:
+		if (rawip)
+			return 0;
 		/* pass along other packets without modifications */
 		return 1;
 	}
+	if (rawip) {
+		skb->dev = dev->net; /* normally set by eth_type_trans */
+		skb->protocol = proto;
+		return 1;
+	}
 	if (skb_headroom(skb) < ETH_HLEN)
 		return 0;
 	skb_push(skb, ETH_HLEN);
@@ -2045,8 +2140,11 @@ static int qmi_wwan_bind(struct usbnet *
 	struct usb_driver *driver = driver_of(intf);
 	struct qmi_wwan_state *info = (void *)&dev->data;
 
-	BUILD_BUG_ON((sizeof(((struct usbnet *)0)->data) <
-		      sizeof(struct qmi_wwan_state)));
+	/* Commented by lsgx 20231226
+	 * Since the size of qmi_wwan_state is 6 not 5 now and the structure of usbnet has a size of 5,
+	 * they are not match anymore */
+	/* BUILD_BUG_ON((sizeof(((struct usbnet *)0)->data) < */
+	/* 	      sizeof(struct qmi_wwan_state))); */
 
 	/* set up initial state */
 	info->control = intf;
@@ -2080,6 +2178,7 @@ static int qmi_wwan_bind(struct usbnet *
 	if (!_usbnet_get_stats64)
 		_usbnet_get_stats64 = dev->net->netdev_ops->ndo_get_stats64;
 	dev->net->netdev_ops = &qmi_wwan_netdev_ops;
+	dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
 
 	ql_net_ethtool_ops = *dev->net->ethtool_ops;
 	ql_net_ethtool_ops.get_drvinfo = ql_net_get_drvinfo;
@@ -2197,7 +2296,7 @@ static int qmi_wwan_bind(struct usbnet *
 
 		info->unused = (unsigned long)pQmapDev;
 		dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
-
+		dev->net->sysfs_groups[2] = &qmi_wwan_rawip_sysfs_attr_group;
 		dev_info(&intf->dev, "rx_urb_size = %zd\n", dev->rx_urb_size);
 	}
 #endif
